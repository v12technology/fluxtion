## Velocity Template.
/* 
 * Copyright (C) 2018 V12 Technology Ltd.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the Server Side Public License, version 1,
 * as published by MongoDB, Inc.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * Server Side License for more details.
 *
 * You should have received a copy of the Server Side Public License
 * along with this program.  If not, see 
 * <http://www.mongodb.com/licensing/server-side-public-license>.
 */
package ${package};

import com.fluxtion.runtime.StaticEventProcessor;
import com.fluxtion.runtime.lifecycle.BatchHandler;
import com.fluxtion.runtime.lifecycle.Lifecycle;
import com.fluxtion.runtime.EventProcessor;
#if(${MODEL.imports})
${MODEL.imports}
#end
import java.util.IdentityHashMap;
import java.util.function.BooleanSupplier;

/*
* <pre>
* generation time   : ${build_time}
* eventProcessorGenerator version : ${generator_version_information}
* api version       : ${api_version_information}
* </pre>
* @author Greg Higgins 
*/
@SuppressWarnings({"deprecation","unchecked", "rawtypes"})
public class ${className} implements EventProcessor, StaticEventProcessor, BatchHandler, Lifecycle ${MODEL.additionalInterfaces}{

//Node declarations
${MODEL.nodeDeclarations}
//Dirty flags
    private boolean processing = false;
    private boolean buffering = false;
    private final IdentityHashMap<Object, BooleanSupplier> dirtyFlagSupplierMap = new IdentityHashMap<>(${MODEL.dirtyFlagCount});
${MODEL.dirtyFlagDeclarations}
//Filter constants
${MODEL.filterConstantDeclarations}

    public ${className} () {
${MODEL.nodeMemberAssignments}
        //callback wiring
        callbackDispatcher.internalEventProcessor = this::onEventInternal;
        callbackDispatcher.externalEventProcessor = this::onEvent;
        callbackDispatcher.isDirtyPredicate = this::isDirty;
        //initialise dirty lookup map
        isDirty("test");
    }

    @Override
    public void onEvent(Object event) {
        if(buffering){
            triggerCalculation();
        }
        if(processing){
            callbackDispatcher.processReentrantEvent(event);
        }else{
            processing = true;
            onEventInternal(event);
            callbackDispatcher.dispatchQueuedCallbacks();
            processing = false;
        }
    }

    private void onEventInternal(Object event) {
    ${MODEL.eventDispatch}
    }

${MODEL.eventHandlers}

    private void afterEvent() {
${MODEL.eventEndMethods}
${MODEL.resetDirtyFlags}
    }

    @Override
    public void init() {
${MODEL.initialiseMethods}
    }

    @Override
    public void tearDown() {
${MODEL.tearDownMethods}
    }

    @Override
    public void batchPause() {
${MODEL.batchPauseMethods}
    }

    @Override
    public void batchEnd() {
${MODEL.batchEndMethods}
    }

    private boolean isDirty(Object node) {
        if(dirtyFlagSupplierMap.isEmpty()){
${MODEL.dirtyFlagLookup}
        }
        return dirtyFlagSupplierMap.getOrDefault(node, StaticEventProcessor.ALWAYS_FALSE).getAsBoolean();
    }

${MODEL.guardCheckMethods}

    public <T> T getNodeById(String id) throws NoSuchFieldException {
        return nodeNameLookup.getInstanceById(id);
    }
}
